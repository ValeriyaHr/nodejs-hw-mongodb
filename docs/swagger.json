{
    "openapi": "3.1.0",
    "info": {
      "version": "1.0.0",
      "title": "Contacts app",
      "license": {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "description": "This is a documentation of contacts app\n"
    },
    "servers": [
      {
        "url": "http://localhost:3000"
      },
      {
        "url": "https://nodejs-hw-mongodb-1oe2.onrender.com/"
      }
    ],
    "tags": [
      {
        "name": "Contacts",
        "description": "Operations about contacts."
      },
      {
        "name": "Auth",
        "description": "Auth operations."
      }
    ],
    "paths": {
      "/contacts": {
        "get": {
          "tags": [
            "Contacts"
          ],
          "summary": "Get list of contacts",
          "operationId": "getContacts",
          "description": "Get list of contacts with this endpoint",
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "query",
              "name": "page",
              "schema": {
                "type": "integer"
              },
              "example": 1
            },
            {
              "in": "query",
              "name": "perPage",
              "schema": {
                "type": "integer",
                "example": 10
              }
            },
            {
              "in": "query",
              "name": "sortBy",
              "schema": {
                "type": "string",
                "example": "name"
              },
              "description": "All contact's fields can be mentioned. Default value - _id"
            },
            {
              "in": "query",
              "name": "sortOrder",
              "schema": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ],
                "example": "asc"
              }
            },
            {
              "in": "query",
              "name": "isFavourite",
              "schema": {
                "type": "boolean",
                "example": true
              }
            },
            {
              "in": "query",
              "name": "contactType",
              "schema": {
                "type": "string",
                "enum": [
                  "work",
                  "home",
                  "personal"
                ],
                "example": "personal"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully found contacts!",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "required": [
                      "status",
                      "message",
                      "data"
                    ],
                    "properties": {
                      "status": {
                        "type": "integer",
                        "example": 200
                      },
                      "message": {
                        "type": "string",
                        "example": "Successfully found contacts!"
                      },
                      "data": {
                        "type": "object",
                        "required": [
                          "data",
                          "page",
                          "perPage",
                          "totalItems",
                          "totalPages",
                          "hasNextPage",
                          "hasPreviousPage"
                        ],
                        "properties": {
                          "data": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/contact"
                            }
                          },
                          "page": {
                            "type": "integer",
                            "example": 1
                          },
                          "perPage": {
                            "type": "integer",
                            "example": 10
                          },
                          "totalItems": {
                            "type": "integer",
                            "example": 50
                          },
                          "totalPages": {
                            "type": "integer",
                            "example": 5
                          },
                          "hasNextPage": {
                            "type": "boolean",
                            "example": true
                          },
                          "hasPreviousPage": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "post": {
          "tags": [
            "Contacts"
          ],
          "summary": "Create contact",
          "operationId": "createContact",
          "description": "Create a contact with payload",
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "required": [
                    "firstName",
                    "lastName",
                    "email",
                    "phone"
                  ],
                  "properties": {
                    "firstName": {
                      "description": "Contact's first name",
                      "type": "string",
                      "example": "John"
                    },
                    "lastName": {
                      "description": "Contact's last name",
                      "type": "string",
                      "example": "Doe"
                    },
                    "email": {
                      "description": "Contact's email address",
                      "type": "string",
                      "format": "email",
                      "example": "john.doe@example.com"
                    },
                    "phone": {
                      "description": "Contact's phone number",
                      "type": "string",
                      "example": "+1234567890"
                    },
                    "isFavourite": {
                      "description": "Whether the contact is a favourite",
                      "type": "boolean",
                      "example": true
                    },
                    "contactType": {
                      "description": "Type of contact",
                      "type": "string",
                      "enum": [
                        "work",
                        "home",
                        "personal"
                      ],
                      "example": "personal"
                    },
                    "userId": {
                      "description": "ID of the user who owns the contact",
                      "type": "string",
                      "example": "60d21b4967d0d8992e610c86"
                    },
                    "photo": {
                      "description": "Contact's photo",
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Creates a contact",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "required": [
                      "status",
                      "message",
                      "data"
                    ],
                    "properties": {
                      "status": {
                        "type": "integer",
                        "example": 201
                      },
                      "message": {
                        "type": "string",
                        "example": "Successfully created a contact!"
                      },
                      "data": {
                        "type": "object",
                        "$ref": "#/components/schemas/contact"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/contacts/{id}": {
        "get": {
          "tags": [
            "Contacts"
          ],
          "summary": "Get contact by id",
          "operationId": "getContact",
          "description": "Get contact by id",
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string",
                "example": "65ca67e7ae7f10c88b598384"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Get contact by id",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "required": [
                      "status",
                      "message",
                      "data"
                    ],
                    "properties": {
                      "status": {
                        "type": "integer",
                        "example": 200
                      },
                      "message": {
                        "type": "string",
                        "example": "Successfully found contact with id 65ca67e7ae7f10c88b598384!"
                      },
                      "data": {
                        "type": "object",
                        "$ref": "#/components/schemas/contact"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "patch": {
          "tags": [
            "Contacts"
          ],
          "summary": "Update contact",
          "operationId": "updateContact",
          "description": "Update a contact with payload",
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "contactId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "ID of the contact to update"
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "firstName": {
                      "description": "Contact's first name",
                      "type": "string",
                      "example": "John"
                    },
                    "lastName": {
                      "description": "Contact's last name",
                      "type": "string",
                      "example": "Doe"
                    },
                    "email": {
                      "description": "Contact's email address",
                      "type": "string",
                      "format": "email",
                      "example": "john.doe@example.com"
                    },
                    "phone": {
                      "description": "Contact's phone number",
                      "type": "string",
                      "example": "+1234567890"
                    },
                    "isFavourite": {
                      "description": "Whether the contact is a favourite",
                      "type": "boolean",
                      "example": true
                    },
                    "contactType": {
                      "description": "Type of contact",
                      "type": "string",
                      "enum": [
                        "work",
                        "home",
                        "personal"
                      ],
                      "example": "personal"
                    },
                    "userId": {
                      "description": "ID of the user who owns the contact",
                      "type": "string",
                      "example": "60d21b4967d0d8992e610c86"
                    },
                    "photo": {
                      "description": "Contact's photo",
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Updates a contact",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "required": [
                      "status",
                      "message",
                      "data"
                    ],
                    "properties": {
                      "status": {
                        "type": "integer",
                        "example": 200
                      },
                      "message": {
                        "type": "string",
                        "example": "Successfully updated the contact!"
                      },
                      "data": {
                        "type": "object",
                        "$ref": "#/components/schemas/contact"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "delete": {
          "tags": [
            "Contacts"
          ],
          "summary": "Delete contact",
          "operationId": "deleteContact",
          "description": "Delete a contact by ID",
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "contactId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "ID of the contact to delete"
            }
          ],
          "responses": {
            "204": {
              "description": "Contact deleted successfully"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/register": {
        "post": {
          "tags": [
            "Auth"
          ],
          "summary": "Register a new user",
          "operationId": "registerUser",
          "description": "Register a new user with name, email, and password",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "email",
                    "password"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 20,
                      "example": "John Doe"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "john.doe@example.com"
                    },
                    "password": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 20,
                      "example": "password123"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User registered successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "integer",
                        "example": 201
                      },
                      "message": {
                        "type": "string",
                        "example": "User registered successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/user"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            }
          }
        }
      },
      "/login": {
        "post": {
          "tags": [
            "Auth"
          ],
          "summary": "Login a user",
          "operationId": "loginUser",
          "description": "Login a user with email and password",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "email",
                    "password"
                  ],
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "john.doe@example.com"
                    },
                    "password": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 20,
                      "example": "password123"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User logged in successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "integer",
                        "example": 200
                      },
                      "message": {
                        "type": "string",
                        "example": "User logged in successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "user": {
                            "$ref": "#/components/schemas/user"
                          },
                          "accessToken": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          },
                          "refreshToken": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            }
          }
        }
      },
      "/refresh": {
        "post": {
          "tags": [
            "Auth"
          ],
          "summary": "Refresh access token",
          "operationId": "refreshToken",
          "description": "Refresh the access token using the refresh token",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "refreshToken"
                  ],
                  "properties": {
                    "refreshToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Token refreshed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "integer",
                        "example": 200
                      },
                      "message": {
                        "type": "string",
                        "example": "Token refreshed successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "accessToken": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          },
                          "refreshToken": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            }
          }
        }
      },
      "/logout": {
        "post": {
          "tags": [
            "Auth"
          ],
          "summary": "Logout a user",
          "operationId": "logoutUser",
          "description": "Logout the currently logged in user",
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "User logged out successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "integer",
                        "example": 200
                      },
                      "message": {
                        "type": "string",
                        "example": "User logged out successfully"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            }
          }
        }
      },
      "/send-reset-email": {
        "post": {
          "tags": [
            "Auth"
          ],
          "summary": "Send password reset email",
          "operationId": "sendResetEmail",
          "description": "Send an email to reset the user password",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "email"
                  ],
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "john.doe@example.com"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset email sent successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "integer",
                        "example": 200
                      },
                      "message": {
                        "type": "string",
                        "example": "Password reset email sent successfully"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            }
          }
        }
      },
      "/reset-pwd": {
        "post": {
          "tags": [
            "Auth"
          ],
          "summary": "Reset password",
          "operationId": "resetPassword",
          "description": "Reset the user password using the token",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "password",
                    "token"
                  ],
                  "properties": {
                    "password": {
                      "type": "string",
                      "example": "newPassword123"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "integer",
                        "example": 200
                      },
                      "message": {
                        "type": "string",
                        "example": "Password reset successfully"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            }
          }
        }
      }
    },
    "components": {
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer"
        }
      },
      "schemas": {
        "contact": {
          "type": "object",
          "required": [
            "_id",
            "name",
            "phoneNumber",
            "contactType",
            "userId"
          ],
          "properties": {
            "_id": {
              "description": "Contact's id",
              "type": "string",
              "example": "60d21b4667d0d8992e610c85"
            },
            "name": {
              "description": "Contact's name",
              "type": "string",
              "example": "Jane Doe"
            },
            "phoneNumber": {
              "description": "Contact's phone number",
              "type": "string",
              "example": "+123456789"
            },
            "email": {
              "description": "Contact's email",
              "type": "string",
              "example": "janedoe@example.com"
            },
            "isFavourite": {
              "description": "Whether the contact is a favourite",
              "type": "boolean",
              "example": true
            },
            "contactType": {
              "description": "Type of contact",
              "type": "string",
              "enum": [
                "work",
                "home",
                "personal"
              ],
              "example": "personal"
            },
            "userId": {
              "description": "ID of the user who owns the contact",
              "type": "string",
              "example": "60d21b4967d0d8992e610c86"
            },
            "photo": {
              "description": "Link to contact's photo",
              "type": "string",
              "example": "https://res.cloudinary.com/uqwgdu/image/upload/image.png"
            }
          }
        },
        "user": {
          "type": "object",
          "required": [
            "_id",
            "name",
            "email"
          ],
          "properties": {
            "_id": {
              "description": "User's id",
              "type": "string",
              "example": "60d21b4667d0d8992e610c85"
            },
            "name": {
              "description": "User's name",
              "type": "string",
              "example": "John Doe"
            },
            "email": {
              "description": "User's email",
              "type": "string",
              "example": "john.doe@example.com"
            },
            "createdAt": {
              "description": "Creation timestamp",
              "type": "string",
              "format": "date-time",
              "example": "2021-06-24T14:42:23.382Z"
            },
            "updatedAt": {
              "description": "Last update timestamp",
              "type": "string",
              "format": "date-time",
              "example": "2021-06-24T14:42:23.382Z"
            }
          }
        }
      },
      "responses": {
        "400": {
          "description": "Bad Request error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status",
                  "message",
                  "data"
                ],
                "properties": {
                  "status": {
                    "type": "integer",
                    "example": 400
                  },
                  "message": {
                    "type": "string",
                    "example": "BadRequestError"
                  },
                  "data": {
                    "type": "object",
                    "required": [
                      "message"
                    ],
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Invalid input data"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status",
                  "message",
                  "data"
                ],
                "properties": {
                  "status": {
                    "type": "integer",
                    "example": 404
                  },
                  "message": {
                    "type": "string",
                    "example": "NotFoundError"
                  },
                  "data": {
                    "type": "object",
                    "required": [
                      "message"
                    ],
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Contact not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
